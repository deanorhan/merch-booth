// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: merch.sql

package db

import (
	"context"
)

const createMerch = `-- name: CreateMerch :one
INSERT INTO merch (
  vendor, title, status, price
) VALUES (
  ?, ?, ?, ?
)
RETURNING merch_id, vendor, status, title, price, description, created_at, modified_at
`

type CreateMerchParams struct {
	Vendor int64
	Title  string
	Status int64
	Price  float64
}

func (q *Queries) CreateMerch(ctx context.Context, arg CreateMerchParams) (Merch, error) {
	row := q.db.QueryRowContext(ctx, createMerch,
		arg.Vendor,
		arg.Title,
		arg.Status,
		arg.Price,
	)
	var i Merch
	err := row.Scan(
		&i.MerchID,
		&i.Vendor,
		&i.Status,
		&i.Title,
		&i.Price,
		&i.Description,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getMerchItem = `-- name: GetMerchItem :one
select merch_id, vendor, status, title, price, description, created_at, modified_at from merch where merch_id = ?
`

func (q *Queries) GetMerchItem(ctx context.Context, merchID int64) (Merch, error) {
	row := q.db.QueryRowContext(ctx, getMerchItem, merchID)
	var i Merch
	err := row.Scan(
		&i.MerchID,
		&i.Vendor,
		&i.Status,
		&i.Title,
		&i.Price,
		&i.Description,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const listMerch = `-- name: ListMerch :many
select merch_id, vendor, status, title, price, description, created_at, modified_at from merch
`

func (q *Queries) ListMerch(ctx context.Context) ([]Merch, error) {
	rows, err := q.db.QueryContext(ctx, listMerch)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Merch
	for rows.Next() {
		var i Merch
		if err := rows.Scan(
			&i.MerchID,
			&i.Vendor,
			&i.Status,
			&i.Title,
			&i.Price,
			&i.Description,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMerchItem = `-- name: UpdateMerchItem :exec
update merch
set title = ?, status= ?, price = ?
where merch_id = ?
`

type UpdateMerchItemParams struct {
	Title   string
	Status  int64
	Price   float64
	MerchID int64
}

func (q *Queries) UpdateMerchItem(ctx context.Context, arg UpdateMerchItemParams) error {
	_, err := q.db.ExecContext(ctx, updateMerchItem,
		arg.Title,
		arg.Status,
		arg.Price,
		arg.MerchID,
	)
	return err
}
